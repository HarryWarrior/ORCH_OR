# Importar las librer√≠as necesarias
from qiskit import QuantumCircuit
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt
import numpy as np

# =============================================================================
# SIMULACI√ìN ORCH-OR: MICROT√öBULO COMPLETO (13 PROTOFILAMENTOS)
# =============================================================================

print("üß† SIMULACI√ìN ORCH-OR - MICROT√öBULO DE 13 QUBITS")
print("=" * 60)
print("Basado en la teor√≠a de Penrose-Hameroff")
print("Cada qubit representa un protofilamento del microt√∫bulo")
print("=" * 60)

# 1. Crear un circuito cu√°ntico con 13 qubits y 13 bits cl√°sicos
qc = QuantumCircuit(13, 13)

print("\n1Ô∏è‚É£ CONFIGURACI√ìN INICIAL:")
print(f"   ‚Ä¢ Qubits: 13 (representando 13 protofilamentos)")
print(f"   ‚Ä¢ Bits cl√°sicos: 13 (para mediciones)")

# 2. FASE 1: Superposici√≥n inicial (estados de indecisi√≥n neuronal)
print("\n2Ô∏è‚É£ FASE 1: SUPERPOSICI√ìN CU√ÅNTICA")
print("   Creando estados de 'indecisi√≥n' en los protofilamentos...")

# Aplicar Hadamard a los primeros 8 qubits (procesamiento activo)
for i in range(8):
    qc.h(i)
    print(f"   ‚Ä¢ H({i}): Protofilamento {i} en superposici√≥n")

# 3. FASE 2: Entrelazamiento tipo microt√∫bulo
print("\n3Ô∏è‚É£ FASE 2: ENTRELAZAMIENTO ESTRUCTURAL")
print("   Creando conexiones entre protofilamentos adyacentes...")

# Entrelazamiento en cadena (como en un microt√∫bulo real)
for i in range(12):
    qc.cx(i, i+1)
    print(f"   ‚Ä¢ CNOT({i},{i+1}): Conectando protofilamentos {i}-{i+1}")

# Entrelazamiento cruzado (estabilidad estructural)
print("   Creando conexiones cruzadas para estabilidad...")
qc.cx(0, 6)   # Conexi√≥n diametral
qc.cx(1, 7)   # Conexi√≥n diametral
qc.cx(2, 8)   # Conexi√≥n diametral
print("   ‚Ä¢ Conexiones diametrales: 0-6, 1-7, 2-8")

# 4. FASE 3: Diferenciaci√≥n Œ± y Œ≤ tubulina
print("\n4Ô∏è‚É£ FASE 3: DIFERENCIACI√ìN DE TUBULINAS")
print("   Simulando dos tipos de prote√≠nas (Œ± y Œ≤ tubulina)...")

# Œ±-tubulina (qubits pares) - m√°s estables
for i in range(0, 13, 2):
    qc.rz(0.1, i)  # Peque√±a rotaci√≥n de fase
    if i < 12:
        print(f"   ‚Ä¢ Œ±-tubulina en posici√≥n {i} (estable)")

# Œ≤-tubulina (qubits impares) - m√°s din√°micas  
for i in range(1, 13, 2):
    qc.ry(0.2, i)  # Rotaci√≥n en Y (m√°s din√°mica)
    print(f"   ‚Ä¢ Œ≤-tubulina en posici√≥n {i} (din√°mica)")

# 5. FASE 4: Decoherencia ambiental (ruido t√©rmico a 37¬∞C)
print("\n5Ô∏è‚É£ FASE 4: DECOHERENCIA T√âRMICA")
print("   Simulando efectos del ambiente cerebral caliente...")

# Ruido distribuido por todo el microt√∫bulo
ruido_positions = [0, 3, 6, 9, 12]  # Distribuci√≥n espacial
for pos in ruido_positions:
    qc.z(pos)  # Ruido de fase
    print(f"   ‚Ä¢ Ruido t√©rmico en protofilamento {pos}")

# Ruido de bit-flip en posiciones centrales
qc.x(5)   # Centro del microt√∫bulo
qc.x(7)   # Centro del microt√∫bulo
print("   ‚Ä¢ Ruido de bit-flip en posiciones centrales: 5, 7")

# 6. FASE 5: Reducci√≥n Objetiva (colapso de la funci√≥n de onda)
print("\n6Ô∏è‚É£ FASE 5: REDUCCI√ìN OBJETIVA")
print("   Simulando el 'momento consciente' de Penrose...")

# Medici√≥n del "nodo central" que inicia el colapso
qc.measure(6, 6)  # Protofilamento central
print("   ‚Ä¢ Medici√≥n en protofilamento central (6)")

# Colapso condicional propag√°ndose
print("   ‚Ä¢ Propagaci√≥n del colapso (si est√° disponible)...")
try:
    with qc.if_test((6, 1)):  # Si el centro colapsa a |1‚ü©
        qc.x(5)  # Afecta vecinos
        qc.x(7)  # Afecta vecinos
        print("   ‚Ä¢ Colapso propagado a vecinos 5 y 7")
except:
    print("   ‚Ä¢ (Colapso condicional no disponible en esta versi√≥n)")

# 7. FASE 6: Mediciones en diferentes "bases neurales"
print("\n7Ô∏è‚É£ FASE 6: MEDICIONES NEURALES")
print("   Midiendo en diferentes 'perspectivas' del procesamiento...")

# Base X (procesamiento intuitivo)
intuitive_qubits = [1, 3, 5]
for q in intuitive_qubits:
    qc.h(q)  # Cambio a base X
    qc.measure(q, q)
    print(f"   ‚Ä¢ Base intuitiva (X): protofilamento {q}")

# Base Y (procesamiento emocional)
qc.ry(np.pi/2, 9)  # Rotaci√≥n a base Y
qc.measure(9, 9)
print("   ‚Ä¢ Base emocional (Y): protofilamento 9")

# Base Z (procesamiento l√≥gico) - el resto
logical_qubits = [0, 2, 4, 8, 10, 11, 12]
for q in logical_qubits:
    qc.measure(q, q)
    print(f"   ‚Ä¢ Base l√≥gica (Z): protofilamento {q}")

# 8. VISUALIZACI√ìN Y SIMULACI√ìN
print("\n8Ô∏è‚É£ SIMULACI√ìN DEL MICROT√öBULO")
print("=" * 40)

# Mostrar el circuito
print("\nEstructura del circuito cu√°ntico:")
try:
    print(qc.draw(fold=-1))
except:
    print("(Circuito muy grande para mostrar - 13 qubits)")

# Simular
print("\nEjecutando simulaci√≥n...")
simulator = AerSimulator()
job = simulator.run(qc, shots=2048)  # M√°s shots para mejor estad√≠stica
result = job.result()
counts = result.get_counts(qc)

# 9. AN√ÅLISIS DE RESULTADOS
print("\n9Ô∏è‚É£ AN√ÅLISIS DE CONSCIENCIA CU√ÅNTICA")
print("=" * 40)

print(f"\nResultados totales: {len(counts)} patrones diferentes")
print(f"Total de mediciones: {sum(counts.values())}")

# Mostrar los 5 patrones m√°s frecuentes
print("\nüîç Top 5 patrones m√°s frecuentes:")
sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
for i, (pattern, count) in enumerate(sorted_counts[:5]):
    probability = count / sum(counts.values()) * 100
    print(f"   {i+1}. {pattern} ‚Üí {count} veces ({probability:.1f}%)")

# M√©tricas de complejidad
total_patterns = len(counts)
max_possible = 2**13
complexity_ratio = total_patterns / max_possible * 100

print(f"\nüìä M√âTRICAS DE CONSCIENCIA:")
print(f"   ‚Ä¢ Complejidad: {total_patterns}/{max_possible} patrones ({complexity_ratio:.2f}%)")
print(f"   ‚Ä¢ Entrop√≠a cu√°ntica: {'Alta' if total_patterns > 100 else 'Media' if total_patterns > 50 else 'Baja'}")
print(f"   ‚Ä¢ Coherencia residual: {'Detectada' if total_patterns < 1000 else 'Perdida'}")

# 10. VISUALIZACI√ìN
print("\nüîü VISUALIZACI√ìN DE RESULTADOS")
print("Generando histograma...")

plt.figure(figsize=(15, 8))
plot_histogram(counts, figsize=(15, 8))
plt.title("üß† Orch-OR: Patrones de Consciencia en Microt√∫bulo (13 Qubits)", fontsize=14)
plt.xlabel("Estados Cu√°nticos (13 bits)", fontsize=12)
plt.ylabel("Frecuencia de Ocurrencia", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n‚úÖ SIMULACI√ìN COMPLETADA")
print("=" * 60)
print("üéì INTERPRETACI√ìN ACAD√âMICA:")
print("‚Ä¢ Cada pico representa un 'estado consciente' posible")
print("‚Ä¢ La distribuci√≥n muestra c√≥mo el cerebro 'elige' entre opciones")
print("‚Ä¢ Patrones no aleatorios sugieren procesamiento cu√°ntico")
print("‚Ä¢ Complejidad moderada indica balance entre orden y caos")
print("=" * 60)